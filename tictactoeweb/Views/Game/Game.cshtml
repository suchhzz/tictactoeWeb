<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/site.css" />
    <title>JavaScript</title>
</head>
<body>
    <div class="main-container d-flex">
        <div class="content">
            <div id="usersCount">

            </div>
            <div id="usersId">

            </div>
            <table>
                <tr>
                    <td><input type="button" data-cell-index="0" id="0" class="cell" onclick="makeMove(0)" /></td>
                    <td><input type="button" data-cell-index="1" id="1" class="cell" onclick="makeMove(1)" /></td>
                    <td><input type="button" data-cell-index="2" id="2" class="cell" onclick="makeMove(2)" /></td>
                </tr>
                <tr>
                    <td><input type="button" data-cell-index="3" id="3" class="cell" onclick="makeMove(3)" /></td>
                    <td><input type="button" data-cell-index="4" id="4" class="cell" onclick="makeMove(4)" /></td>
                    <td><input type="button" data-cell-index="5" id="5" class="cell" onclick="makeMove(5)" /></td>
                </tr>
                <tr>
                    <td><input type="button" data-cell-index="6" id="6" class="cell" onclick="makeMove(6)" /></td>
                    <td><input type="button" data-cell-index="7" id="7" class="cell" onclick="makeMove(7)" /></td>
                    <td><input type="button" data-cell-index="8" id="8" class="cell" onclick="makeMove(8)" /></td>
                </tr>
            </table>
            <div id="result"></div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
    <script src="~/js/site.js"></script>

    <script>
        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/game")
            .build();

        let userId = 0;

        let usersOnline;
        let usersAll;

        let gameOver = false;
        let game = new TicTacToe();
        let currentWinIndex = 0;

        document.addEventListener("DOMContentLoaded", function () {
            hubConnection.on("GetOnlineUsers", function (usersOnlineFromServer, usersAllFromServer) {

                usersOnline = usersOnlineFromServer;
                usersAll = usersAllFromServer;

                updateCountUsers();
            });

            hubConnection.on("GetUserId", function (userIdFromServer) {
                userId = userIdFromServer;
                console.log("id: " + userId);
                updateUserId();
            });

            hubConnection.on("PassMove", function (passMovePlayerId) {
                console.log("moving id: " + passMovePlayerId);

                allowButtons(userId === passMovePlayerId);
            });
        });

        function allowButtons(pass) {
            let cells = document.querySelectorAll('.cell[data-cell-index]');
            cells.forEach(function (item) {
                item.disabled = !pass;
            });
        }

        function updateCountUsers()
        {
            const usersCountDiv = document.getElementById("usersCount");

            const OnlineElem = document.createElement("p");
            OnlineElem.textContent = `online users: ${usersOnline}`;

            const AllUsersElem = document.createElement("p");
            AllUsersElem.textContent = `all users: ${usersAll}`;

            while (usersCountDiv.firstChild) { 
                usersCountDiv.removeChild(usersCountDiv.firstChild);
            }

            usersCountDiv.appendChild(OnlineElem);
            usersCountDiv.appendChild(AllUsersElem);
        }

        function updateUserId() { 
            const userIdDiv = document.getElementById("usersId");

            const userIdElem = document.createElement("p");
            userIdElem.textContent = `id: ${userId}`;

            userIdDiv.removeChild(userIdDiv.firstChild);
            userIdDiv.appendChild(userIdElem);
        }


        function makeMove(cell) {
            if (!gameOver) {
                if (game.makeMove(cell, userId)) {
                    if (game.checkWin()) {
                        game.winIndex = userId;
                        hubConnection.invoke("SendPlayerMove", userId, cell, game.winIndex)
                            .catch((error) => {
                                console.error("Ошибка при отправке данных на сервер:", error);
                            });
                    } else {
                        hubConnection.invoke("SendPlayerMove", userId, cell, game.winIndex)
                            .catch((error) => {
                                console.error("Ошибка при отправке данных на сервер:", error);
                            });
                    }
                }
            }
        }

        hubConnection.on("ReceiveMove", function (userIdServer, cellServer, winIndexServer) {

            updatePlayground(userIdServer, cellServer);

            const buttonElem = document.getElementById(`${cellServer}`);

            if (userIdServer === 1) {
                buttonElem.style.background = 'red';
            }
            else if (userIdServer === 2) {
                buttonElem.style.background = 'blue';
            }

            console.log(game.playground);
            console.log(game.winIndex);
        });

        hubConnection.on("WinMessage", function (winner) {
            let resultElement = document.createElement("p");
            let resultText = document.createTextNode(winner);
            resultElement.appendChild(resultText);
            document.getElementById("result").appendChild(resultElement);
            disablePlayground();
        });

        hubConnection.on("GameStatus", function (status) {
            gameOver = status;
        });

        function disablePlayground() {
            let cells = document.querySelectorAll('.cell[data-cell-index]');
            cells.forEach(function (item) {
                item.disabled = true;
            });
        };

        function updatePlayground(userIdServer, cellServer) { 
            game.playground[cellServer] = userIdServer;

            console.log("win index: " + game.winIndex);
        }


        function updateBoard()
        {
            for (let i = 0; i < game.playground.length; i++)
            {
                const cellButton = document.querySelector(`.cell[data-cell-index="${i}"]`);
                if (game.playground[i] === 1)
                {
                    cellButton.style.backgroundColor = 'red';
                }
                else if (game.playground[i] === 2)
                {
                    cellButton.style.backgroundColor = 'blue';
                }
                else
                {
                    cellButton.style.backgroundColor = 'white';
                }
            }
        }

        hubConnection.start()
            .then(function () {
                let cells = document.querySelectorAll('.cell[data-cell-index]');
                cells.forEach(function (item) {
                    item.disabled = true;
                });
            })
            .catch(function (err) {
                return console.error(err.toString());
            });
    </script>

</body>
</html>